##################################################
# Preliminary Analysis on Rcard Dataset
# ---------------------------------
# Created by  : Adam Nguyen
# Updated by  : Adam Nguyen
# Created at  : 11/01/2013
# Updated at  : xx/xx/xxxx
# Description : Execute Big Data Chain Regression
##################################################

#Clear Environment
rm(list = ls(all = TRUE)) 

#Set Directory
setInternet2(TRUE)
myfolder <- "C:/Users/adam.nguyen/Desktop/Useful R/"
setwd(myfolder)
source(paste(c(myfolder,"library.R"),collapse="")) #Get library
source(paste(c(myfolder,"BDCR.R"),collapse="")) #Get Big Data Chain Regression Function
source(paste(c(myfolder,"rxDiscretization.R"),collapse="")) #Get rxDiscretization Function
source(paste(c(myfolder,"rxSample.R"),collapse="")) #Get rxDiscretization Function

outfile <- "temp.xdf" #Name output file

#Create SQL Query
query <- "select top 100000 * from temp2" #Link to target file in SQL Server

connstring <- paste("DSN=RSQL","Uid=adam.nguyen", sep = ";")
myodbcSource <- RxOdbcData(sqlQuery =query, connectionString = connstring)
myXdfFileName <- file.path(tempdir(), "importedMySQLData.xdf")
rxImport(inData=myodbcSource, outFile=outfile, overwrite=TRUE, stringsAsFactors=TRUE, na.rm=TRUE)

#Summarize data
rxGetInfoXdf(outfile, getVarInfo=TRUE)
rxGetInfoXdf(outfile, numRows=30000, startRow=1, getVarInfo=TRUE)
rxSort(inData=outfile, varsToKeep=c("GMS_A_2011","GMS_A_2011_n"), sortByVars="GMS_A_2011", decreasing=TRUE)

##Quantile all numeric variables in a dataframe
vnames <- rxGetVarNames(outfile)

star <- matrix(NA,nrow=10,ncol=3)
star[,1] <- 1:10
var.test <- "GMS_3"
quantile <- 10
var_quant <- rxQuantile("GMS_3m", data=outfile, names=TRUE, probs=seq(0,1,1/quantile))
c(var_quant[10],var_quant[11])


rm(star)
star <- matrix(NA,nrow=10,ncol=3)
var_quant <- rxQuantile("GMS_3m", data=outfile, names=TRUE, probs=seq(0,1,.1))
for (i in 1:10){
  star[i,2:3] <- c(var_quant[i],var_quant[i+1])
}
rxDataStep(inData=outfile, outFile="temp2", transforms=expression(list(GMS_3m_TGT = TGT==1)), overwrite=TRUE)

size <- length(rxGetVarNames(outfile))
quantile <- 10
var_names <- rxGetVarNames(outfile)
var_names <- c("GMS_3m","GMS_6m","GMS_12m")
var_table
head(var_table)

rm(var_table)
for(i in 1:size){
  
  if(exists("var_table")==FALSE){
    var_table <- cbind(vnames, matrix(NA,length(vnames),quantile+1))
    var_quant <- try(rxQuantile(vnames[13], data=outfile, names=TRUE, probs=seq(0,1,1/quantile)))
    colnames(var_table) <- c("variable",names(var_quant))
    quantiles()
    if(is(var_quant,"try-error")==TRUE)){
      var_quant <- rep(NA,quantile+1)
    }else{		
      var_table[13,2:(quantile+2)] <- var_quant
      var_table[13,]
    }	

  }else{
    var_quant <- rxQuantile(vnames[i], data=outfile, names=TRUE, probs=seq(0,1,1/quantile))
    var_table[i,2:(quantile+2)] <- rxQuantile(vnames[i], data=outfile, names=TRUE, probs=seq(0,1,1/quantile))
  }
}
}

qtable <- rxQuantile(vnames[1], data=outfile, names=TRUE, probs=seq(0,1,.1))
rbind(qtable)

#Discretize the continuous variables
##Select variables to discretize and create binning parameters
disc.name <- rxGetVarNames(outfile)
disc.name <- disc.name[!disc.name=="TGT"]
disc.text <- paste("~", paste(disc.name,collapse=" + "),collapse=" ")
disc.form <- as.formula(disc.text)

##Check and select only numeric data
rxGetInfoXdf(outfile, getVarInfo=TRUE)

##Select binning variables only
disc.form <- ~r_mkt_delta2 + GMS_3m + GMS_6m + GMS_12m + GMS_A_2011+ GMS_A_2012 + GMS_R_2011 + GMS_R_2012+ average_purchase_amount + order_cnt + points_used + points_earned + amazon_yoy + rakuten_yoy + Amazon_GMS + Amazon_Orders + RCard_GMS + RCard_Orders + Flag_1 + Flag_10 +Flag_13
disc.set <- rxDiscretize(disc.form, data=outfile, type="freq", nBins=10)

##Add columns with binning parameters from previous step
rxDataStep(inData=outfile, outFile="outfile2.xdf", transforms=disc.set, overwrite=TRUE)
rxGetInfoXdf("outfile2.xdf", getVarInfo=TRUE)
outfile <- "outfile2.xdf"

##Transform quantile categorical data into numeric
disc.form2 <- c("r_mkt_delta2","GMS_3m","GMS_6m","GMS_12m","GMS_A_2011","GMS_A_2012","GMS_R_2011","GMS_R_2012","average_purchase_amount","order_cnt","points_used","points_earned","amazon_yoy","rakuten_yoy","Amazon_GMS","Amazon_Orders","RCard_GMS","RCard_Orders","Flag_1","Flag_10","Flag_13") #Create list of target quantiles
matrix.disc <- rep(NA,length(disc.form2)) #Create vector for storage
##Loop through all variables that have a disc  
for (i in 1:length(disc.form2)){disc.var <- disc.form2[i]
                                disc.result <- paste0(disc.var, "_n", " = as.numeric(", disc.var, "_disc)")
                                matrix.disc[i] <- disc.result
} 
matrix.vector <- paste(matrix.disc,sep="", collapse=", ")
matrix.list <- noquote(matrix.vector)

rxDataStep(inData=outfile, outFile="temp.xdf", transforms=expression(list(r_mkt_delta2_n = as.numeric(r_mkt_delta2_disc), GMS_3m_n = as.numeric(GMS_3m_disc), GMS_6m_n = as.numeric(GMS_6m_disc), GMS_12m_n = as.numeric(GMS_12m_disc), GMS_A_2011_n = as.numeric(GMS_A_2011_disc), GMS_A_2012_n = as.numeric(GMS_A_2012_disc), GMS_R_2011_n = as.numeric(GMS_R_2011_disc), GMS_R_2012_n = as.numeric(GMS_R_2012_disc), average_purchase_amount_n = as.numeric(average_purchase_amount_disc), order_cnt_n = as.numeric(order_cnt_disc), points_used_n = as.numeric(points_used_disc), points_earned_n = as.numeric(points_earned_disc), amazon_yoy_n = as.numeric(amazon_yoy_disc), rakuten_yoy_n = as.numeric(rakuten_yoy_disc), Amazon_GMS_n = as.numeric(Amazon_GMS_disc), Amazon_Orders_n = as.numeric(Amazon_Orders_disc), RCard_GMS_n = as.numeric(RCard_GMS_disc), RCard_Orders_n = as.numeric(RCard_Orders_disc), Flag_1_n = as.numeric(Flag_1_disc), Flag_10_n = as.numeric(Flag_10_disc), Flag_13_n = as.numeric(Flag_13_disc))), overwrite=TRUE)
rxGetInfoXdf("temp.xdf", getVarInfo=TRUE)
rxGetInfoXdf("temp.xdf", getVarInfo=TRUE, numRows=100, startRow=1)
outfile <- "temp.xdf"

rxDataStep(inData="temp.xdf", numRows=100000)

##Creates histogram of specified data
GMS_A_2011
rxHistogram(~GMS_A_2011_n, data=outfile, title = "", xTitle = "Bins", yTitle = "Frequency", fillColor = "steelblue", lineColor = "black", lineStyle = "solid", lineWidth = 1, plotAreaColor = "white", gridColor = "black", gridLineWidth = 1, gridLineStyle = "solid", maxNumPanels = NULL, reportProgress = rxGetOption("reportProgress"), print = TRUE)
rxQuantile("GMS_3m", data=outfile, names=TRUE, probs=seq(0,1,.1))

#Check individual regression
rxLogit(TGT~GMS_3m, data="temp.xdf")
rxLogit(TGT~GMS_3m_disc, data="temp.xdf")
rxLogit(TGT~GMS_3m_n, data="temp.xdf")

rxLogit(TGT~GMS_6m_disc, data=outfile)
summary(log) 
rxSummary(~Flag_10, outfile)
rxGetVarInfo(outfile, varsToKeep="GMS_6m_disc")

#Perform single variable regressions on each variable against target
table <- BigDataChainReg(outfile, TGT)

#Write data to CSV
write.csv(x = table, file = "temp.csv", row.names = TRUE)


#Check correlation matrix to reduce dimensionality
cnames <- rxGetVarNames(outfile)
cnames.form.text <- paste("~", paste(cnames, sep="", collapse="+"), collapse="")
cnames.form <- as.formula(cnames.form.text)
allCor <- rxCovCor(cnames.form, data = outfile, type = "Cor")
corr <- allCor$CovCor
write.csv(x = corr, file = "regression_chain.csv", row.names = TRUE)

#Correlation matrix
rgb.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
levelplot(corr[1:50,1:50], main="Correlation Matrix", xlab="", ylab="", col.regions=rgb.palette(120), cuts=100, at=seq(0,1,0.01))
