###################################
# Making Categorical Values
# ---------------------------------
# Started by  : Adam Nguyen
# Updated by  : Adam Nguyen
# Created at  : 12/10/2013
# Updated at  : 12/15/2013
# Description : Data Munging
###################################

#simulation
values <- NULL
values$data <- as.data.frame(abs(rnorm(100,1,5000000)))
breaks <- 10


# Quick Label Breaks for ggplot2
get_label_breaks <-  function(data, ticks, magnitude, decimals, units){
  brk_val <- quantile(data, probs = seq(0, 1, 1/ticks), na.rm =TRUE)
  brk_lab <- paste(round(brk_val/magnitude, digits=decimals), units, sep="")
  label_values <- data.frame(matrix(NA, nrow=1, ncol=ticks+1))
  names(label_values) <- brk_lab
  label_values[1,] <- brk_val 
  print(label_values)
}


# Create break points
val_breaks <- function(values, breaks){
  brks <- quantile(values$data, seq(0,1,1/breaks))
  for (i in 2:length(brks)) {
    if (brks[i] <= brks[i-1]) {
  brks[i] <- brks[i-1] + 1/10^10
    }
  }
return(brks)
}

# Transform data by categories
val_quantile <- function(values, breaks) {
  brks <- get_breaks(values, breaks)
  categorical <- cut(values, brks, labels=FALSE, include.lowest=FALSE, right=FALSE)
  categorical[which(is.na(categorical))] = length(brks) - 1  
  return(categorical)
}

# Transform data by break points
tval <- function(values, tval_seq, within_flg = FALSE) {
  if(!within_flg){
    tvalues <- append(append(tval_seq,-Inf,0),Inf)
  }
  for (i in 2:length(tvalues)) {
    if (tvalues[i] <= tvalues[i-1]) {
      tvalues[i] <- tvalues[i-1] + 1/10^10
    }
  }
  categorical <- cut(values, tvalues, labels=FALSE, include.lowest=FALSE, right=FALSE)
  categorical[which(is.na(categorical))] = length(tvalues) - 1
return(categorical)
}

# Discretize Big Data (Requires manual adjustment)
test <- rxGetInfo(data=data, numRows=10000, startRow=1)
data <- "file.xdf"
variables <- c("a","b","c")

rxQuant <- function(data, variables, breaks){
    prime <- rxGetInfo(data=data, numRows=10000, startRow=1)
    for (i in 1:length(variables){
        form <- variables[i]
        name <- paste(variables[i],"_q", sep="")
        rxDataStep(inData=data, transforms = list(paste0(variables[i], "_q") = cut(variables[i], breaks=c(quantile(variables[i], probs=seq(0,1,by=1/breaks), na.rm=TRUE)),labels=c(1:breaks))), overwrite=TRUE)
        test.xsf <- RxXdfData(test)
        rxDataStep(inData=data, varsToDrop=NULL, transforms = list(paste0(variables[i], "_q") = cut(variables[i], breaks=c(quantile(variables[i], probs=seq(0,1,by=1/breaks), na.rm=TRUE)),labels=c(1:breaks), ordered_result=c(1:breaks))), overwrite=TRUE)
}

# Normalization
normalize <- function(x) { 
   x <- sweep(x, 2, apply(x, 2, min)) 
   sweep(x, 2, apply(x, 2, max), "/") 
} 


# Create Training, Test, and Validation Sets
splitdf <- function(dataframe, train = train_share, test = 1, seed = NULL) {
    if ( ! is.null(seed)) set.seed(seed)
   	index.total <- 1:nrow(data)
    index.train <- sample(index.total, trunc(length(index.total) * train))
    index.test <- sample(index.total[-index.train], trunc(ceiling(length(index.total) * test)))
    trainset <- dataframe[index.train, ]
	testset <- dataframe[index.test, ]
    validationset <- dataframe[c(-index.test, -index.train), ]
    list(trainset = trainset, testset = testset, validationset = validationset)
}

